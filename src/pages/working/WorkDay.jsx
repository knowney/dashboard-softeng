import React, { useState, useEffect } from "react";
import {
  Form,
  Input,
  Button,
  DatePicker,
  TimePicker,
  Card,
  message,
} from "antd";
import { addWorkData } from "./WorkFunc";
import {
  UserOutlined,
  EnvironmentOutlined,
  ClockCircleOutlined,
  CalendarOutlined,
} from "@ant-design/icons";
import dayjs from "dayjs";
import { auth, db } from "../../service/firebaseDb"; // Firebase
import { doc, getDoc } from "firebase/firestore"; // ‚úÖ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÅ‡∏Ñ‡πà doc ‡πÅ‡∏•‡∏∞ getDoc

const WorkDay = () => {
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();
  const [userName, setUserName] = useState("");
  const [userRole, setUserRole] = useState(""); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

  useEffect(() => {
    const getMe = async () => {
      try {
        const user = auth.currentUser;
        console.log("üî• Current User:", user); // ‚úÖ Debug User Data

        if (!user) {
          console.warn("‚ö†Ô∏è No authenticated user found!");
          return;
        }

        const userRef = doc(db, "users", user.uid);
        const userDoc = await getDoc(userRef);

        if (userDoc.exists()) {
          console.log("üìÑ Fetched User Document:", userDoc.data()); // ‚úÖ Debug User Firestore Data
          setUserName(userDoc.data().name);
          setUserRole(userDoc.data().role);
          form.setFieldsValue({ workBy: userDoc.data().name }); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        } else {
          console.error("‚ùå User document not found in Firestore!");
        }
      } catch (error) {
        console.error("‚ùå Error fetching user data:", error);
      }
    };

    getMe();
  }, [form]);

  // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á UserName ‡πÅ‡∏•‡∏∞ Role
  useEffect(() => {
    console.log("‚úÖ UserName:", userName);
    console.log("‚úÖ UserRole:", userRole);
  }, [userName, userRole]);

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const workData = {
        workDate: values.workDate.toDate(),
        workTime: values.workTime.format("HH:mm"),
        workBy: userName,
        workFrom: values.workFrom,
        solidWaste: parseFloat(values.solidWaste),
        medicalWaste: parseFloat(values.medicalWaste),
        note: values.note || "",
      };

      console.log("üìù Work Data before saving:", workData); // ‚úÖ Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

      const response = await addWorkData(workData);
      if (response.success) {
        message.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        form.resetFields();
        form.setFieldsValue({
          workDate: dayjs(),
          workTime: dayjs(),
          workBy: userName, // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        });
      } else {
        message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + response.error);
      }
    } catch (error) {
      console.error("‚ùå Error adding work data:", error); // ‚úÖ Debug Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!");
    }
    setLoading(false);
  };

  return (
    <div className="flex justify-center mt-6">
      <Card title="üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏¢‡∏∞" className="w-full max-w-md shadow-lg">
        <Form
          form={form}
          layout="vertical"
          onFinish={onFinish}
          size="small"
          initialValues={{
            workDate: dayjs(),
            workTime: dayjs(),
          }}
        >
          {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
          <div className="grid grid-cols-2 gap-4">
            <Form.Item label="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" name="workDate">
              <DatePicker
                className="w-full"
                format="DD MMM YYYY"
                suffixIcon={<CalendarOutlined />}
              />
            </Form.Item>

            <Form.Item label="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤" name="workTime">
              <TimePicker
                className="w-full"
                format="HH:mm"
                suffixIcon={<ClockCircleOutlined />}
              />
            </Form.Item>
          </div>

          {/* ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô */}
          <div className="grid grid-cols-2 gap-4">
            <Form.Item label="üë∑‚Äç‚ôÇÔ∏è ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏î‡∏¢" name="workBy">
              <Input value={userName} readOnly prefix={<UserOutlined />} />
            </Form.Item>

            <Form.Item
              label="üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
              name="workFrom"
              rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô" }]}
            >
              <Input placeholder="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô" prefix={<EnvironmentOutlined />} />
            </Form.Item>
          </div>

          {/* ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞ */}
          <div className="grid grid-cols-2 gap-4">
            <Form.Item
              label="üóë ‡∏Ç‡∏¢‡∏∞‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢ (‡∏Å‡∏Å.)"
              name="solidWaste"
              rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢" }]}
            >
              <Input type="number" placeholder="0.0" min="0" step="0.1" />
            </Form.Item>

            <Form.Item
              label="‚ö†Ô∏è ‡∏Ç‡∏¢‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ (‡∏Å‡∏Å.)"
              name="medicalWaste"
              rules={[
                { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠" },
              ]}
            >
              <Input type="number" placeholder="0.0" min="0" step="0.1" />
            </Form.Item>
          </div>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
          <Form.Item label="üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" name="note">
            <Input.TextArea placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" />
          </Form.Item>

          <Button
            type="primary"
            htmlType="submit"
            loading={loading}
            className="w-full"
          >
            ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
        </Form>
      </Card>
    </div>
  );
};

export default WorkDay;
