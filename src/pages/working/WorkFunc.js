import { db } from "../../service/firebaseDb";
import {
  collection,
  getDocs,
  query,
  where,
  Timestamp,
  addDoc,
} from "firebase/firestore";
import dayjs from "dayjs";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô, ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏õ‡∏µ)
export const fetchWorkDataByPeriod = async (period) => {
  try {
    let startDate;
    const now = dayjs();

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    switch (period) {
      case "day":
        startDate = now.startOf("day").toDate();
        break;
      case "week":
        startDate = now.startOf("week").toDate();
        break;
      case "month":
        startDate = now.startOf("month").toDate();
        break;
      case "year":
        startDate = now.startOf("year").toDate();
        break;
      default:
        throw new Error("Invalid period");
    }

    // ‚úÖ Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
    const q = query(
      collection(db, "WorkDay"), // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô Firestore
      where("workDate", ">=", Timestamp.fromDate(startDate))
    );

    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:", period);
      return { labels: [], datasets: [] }; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
    }

    const workData = [];
    querySnapshot.forEach((doc) => {
      workData.push(doc.data());
    });

    console.log("üî• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", workData);

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ChartJS
    const groupedData = workData.reduce((acc, entry) => {
      const dateLabel = dayjs(entry.workDate.toDate()).format("DD MMM"); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      if (!acc[dateLabel]) {
        acc[dateLabel] = { solidWaste: 0, medicalWaste: 0 };
      }
      acc[dateLabel].solidWaste += entry.solidWaste;
      acc[dateLabel].medicalWaste += entry.medicalWaste;
      return acc;
    }, {});

    const labels = Object.keys(groupedData);
    const solidWasteData = labels.map((date) => groupedData[date].solidWaste);
    const medicalWasteData = labels.map(
      (date) => groupedData[date].medicalWaste
    );

    return {
      labels,
      datasets: [
        {
          label: "‡∏Ç‡∏¢‡∏∞‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢ (‡∏Å‡∏Å.)",
          data: solidWasteData,
          backgroundColor: "rgba(75, 192, 192, 0.6)",
        },
        {
          label: "‡∏Ç‡∏¢‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ (‡∏Å‡∏Å.)",
          data: medicalWasteData,
          backgroundColor: "rgba(255, 99, 132, 0.6)",
        },
      ],
    };
  } catch (error) {
    console.error("‚ùå Error fetching work data:", error);
    return { labels: [], datasets: [] };
  }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WorkDay ‡∏•‡∏á Firestore
export const addWorkData = async (workData) => {
  try {
    const docRef = await addDoc(collection(db, "WorkDay"), {
      ...workData,
      workDate:
        workData.workDate instanceof Date
          ? Timestamp.fromDate(workData.workDate) // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Timestamp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô Date
          : workData.workDate, // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Timestamp ‡πÅ‡∏•‡πâ‡∏ß
      createdAt: Timestamp.now(),
    });

    console.log("üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID:", docRef.id);
    return { success: true, id: docRef.id };
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    return { success: false, error: error.message };
  }
};
