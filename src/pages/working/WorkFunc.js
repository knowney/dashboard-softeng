import { db } from "../../service/firebaseDb";
import {
  collection,
  getDocs,
  query,
  where,
  Timestamp,
  addDoc,
} from "firebase/firestore";
import dayjs from "dayjs";
import isoWeek from "dayjs/plugin/isoWeek";
dayjs.extend(isoWeek); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ISO

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô, ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏õ‡∏µ)
export const fetchWorkDataByPeriod = async (period) => {
  try {
    let startDate;
    let endDate = dayjs().toDate();
    const now = dayjs();

    switch (period) {
      case "day":
        startDate = now.startOf("day").toDate();
        break;
      case "week":
        startDate = now.startOf("week").toDate();
        break;
      case "month":
        startDate = now.subtract(11, "months").startOf("month").toDate(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        break;
      case "year":
        startDate = now.subtract(4, "years").startOf("year").toDate(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏õ‡∏µ
        break;
      default:
        throw new Error("Invalid period");
    }

    const q = query(
      collection(db, "WorkDay"),
      where("workDate", ">=", Timestamp.fromDate(startDate)),
      where("workDate", "<=", Timestamp.fromDate(endDate))
    );

    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:", period);
      return { labels: [], datasets: [] };
    }

    const workData = [];
    querySnapshot.forEach((doc) => {
      workData.push(doc.data());
    });

    console.log("üî• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", workData);

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    let groupedData = {};
    if (period === "month") {
      groupedData = workData.reduce((acc, entry) => {
        const monthLabel = dayjs(entry.workDate.toDate()).format("MMM YYYY"); // üìÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡∏õ‡∏µ
        if (!acc[monthLabel]) {
          acc[monthLabel] = { solidWaste: 0, medicalWaste: 0 };
        }
        acc[monthLabel].solidWaste += entry.solidWaste;
        acc[monthLabel].medicalWaste += entry.medicalWaste;
        return acc;
      }, {});
    } else if (period === "year") {
      groupedData = workData.reduce((acc, entry) => {
        const yearLabel = dayjs(entry.workDate.toDate()).format("YYYY"); // üìÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ
        if (!acc[yearLabel]) {
          acc[yearLabel] = { solidWaste: 0, medicalWaste: 0 };
        }
        acc[yearLabel].solidWaste += entry.solidWaste;
        acc[yearLabel].medicalWaste += entry.medicalWaste;
        return acc;
      }, {});
    } else {
      groupedData = workData.reduce((acc, entry) => {
        const dateLabel = dayjs(entry.workDate.toDate()).format("DD MMM"); // üìÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô
        if (!acc[dateLabel]) {
          acc[dateLabel] = { solidWaste: 0, medicalWaste: 0 };
        }
        acc[dateLabel].solidWaste += entry.solidWaste;
        acc[dateLabel].medicalWaste += entry.medicalWaste;
        return acc;
      }, {});
    }

    const labels = Object.keys(groupedData);
    const solidWasteData = labels.map((date) => groupedData[date].solidWaste);
    const medicalWasteData = labels.map(
      (date) => groupedData[date].medicalWaste
    );

    return {
      labels,
      datasets: [
        {
          label: "‡∏Ç‡∏¢‡∏∞‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢ (‡∏Å‡∏Å.)",
          data: solidWasteData,
          backgroundColor: "rgba(75, 192, 192, 0.6)",
        },
        {
          label: "‡∏Ç‡∏¢‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ (‡∏Å‡∏Å.)",
          data: medicalWasteData,
          backgroundColor: "rgba(255, 99, 132, 0.6)",
        },
      ],
    };
  } catch (error) {
    console.error("‚ùå Error fetching work data:", error);
    return { labels: [], datasets: [] };
  }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WorkDay ‡∏•‡∏á Firestore

export const addWorkData = async (workData) => {
  try {
    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á workDate ‡πÄ‡∏õ‡πá‡∏ô Date (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Timestamp)
    const workDate =
      workData.workDate instanceof Date
        ? workData.workDate
        : workData.workDate.toDate(); // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Timestamp ‡πÅ‡∏•‡πâ‡∏ß

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏õ‡∏µ
    const week = dayjs(workDate).isoWeek(); // ISO Week
    const month = dayjs(workDate).month() + 1; // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á +1
    const year = dayjs(workDate).year(); // ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
    const docRef = await addDoc(collection(db, "WorkDay"), {
      ...workData,
      workDate: Timestamp.fromDate(workDate), // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô Timestamp
      createdAt: Timestamp.now(), // ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      week, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
      month, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      year, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏õ‡∏µ
    });

    console.log("üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID:", docRef.id);
    return { success: true, id: docRef.id };
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    return { success: false, error: error.message };
  }
};

//‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏¢‡∏∞‡∏°‡∏π‡∏•‡∏ù‡∏≠‡∏¢ & ‡∏Ç‡∏¢‡∏∞‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠
export const fetchTotalWasteData = async () => {
  try {
    const q = collection(db, "WorkDay"); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const querySnapshot = await getDocs(q);

    let totalSolidWaste = 0;
    let totalMedicalWaste = 0;

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      totalSolidWaste += data.solidWaste || 0;
      totalMedicalWaste += data.medicalWaste || 0;
    });

    return {
      solidWaste: totalSolidWaste,
      medicalWaste: totalMedicalWaste,
    };
  } catch (error) {
    console.error("‚ùå Error fetching total waste data:", error);
    return { solidWaste: 0, medicalWaste: 0 };
  }
};
