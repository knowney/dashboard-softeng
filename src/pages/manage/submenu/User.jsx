import React, { useEffect, useState } from "react";
import { message, Modal, Form, Input, Select, Button } from "antd";
import {
  UserAddOutlined,
  SettingOutlined,
  UserOutlined,
  LockOutlined,
  MailOutlined,
} from "@ant-design/icons";
import UserTable from "../../../components/CustomTable";
import {
  fetchUsers,
  deleteUser,
  updateUser,
  toggleUserStatus,
} from "../../../service/UserFunc";
import { userColumns } from "../table/UserTable";
import { Timestamp, setDoc, doc } from "firebase/firestore";
import { createUserWithEmailAndPassword } from "firebase/auth"; // ‚úÖ ‡πÉ‡∏ä‡πâ Firebase Auth ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
import { db, auth } from "../../../service/firebaseDb"; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ import db ‡πÅ‡∏•‡∏∞ auth ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

const User = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isAddModalVisible, setIsAddModalVisible] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [pagination, setPagination] = useState({ current: 1, pageSize: 5 });
  const [form] = Form.useForm();
  const [addForm] = Form.useForm();

  useEffect(() => {
    let isMounted = true; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà

    const loadUsers = async () => {
      setLoading(true);
      try {
        const data = await fetchUsers();
        if (isMounted) {
          setUsers(data);
        }
      } catch (error) {
        if (isMounted) {
          message.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!");
        }
      }
      if (isMounted) {
        setLoading(false);
      }
    };

    loadUsers();

    return () => {
      isMounted = false; // Cleanup function ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô state update ‡∏´‡∏•‡∏±‡∏á component unmount
    };
  }, []);

  const handleModalClose = () => {
    setIsModalVisible(false);
    setIsAddModalVisible(false);
    form.resetFields();
    addForm.resetFields();
  };

  const handleEditUser = (user) => {
    setSelectedUser(user);
    form.setFieldsValue({
      name: user.name,
      lastName: user.lastName,
      role: user.role,
      status: user.status,
    });
    setIsModalVisible(true);
  };

  const handleToggleStatus = async (uid, currentStatus) => {
    try {
      console.log(
        `üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á UID: ${uid}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ${currentStatus}`
      );

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ toggleUserStatus ‡∏à‡∏≤‡∏Å UserFunc.js
      const newStatus = await toggleUserStatus(uid, currentStatus);

      if (newStatus) {
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ setUsers()
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.uid === uid ? { ...user, status: newStatus } : user
          )
        );

        message.success(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${uid} ‡πÄ‡∏õ‡πá‡∏ô: ${newStatus}`);
      } else {
        throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore");
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ!");
    }
  };

  const handleSaveUser = async () => {
    setLoading(true);
    try {
      const values = await form.validateFields();
      const success = await updateUser(selectedUser.uid, values);
      if (success) {
        message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.uid === selectedUser.uid ? { ...user, ...values } : user
          )
        );
        handleModalClose();
      }
    } catch (error) {
      message.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
    }
    setLoading(false);
  };

  const handleAddUser = async () => {
    try {
      const values = await addForm.validateFields();
      setLoading(true); // ‡πÄ‡∏õ‡∏¥‡∏î loading ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

      const userCredential = await createUserWithEmailAndPassword(
        auth,
        values.email,
        values.password
      );
      const newUserId = userCredential.user.uid;

      const newUser = {
        uid: newUserId,
        name: values.name,
        lastName: values.lastName,
        email: values.email,
        role: values.role,
        status: "active",
        createdAt: Timestamp.fromDate(new Date()),
      };

      await setDoc(doc(db, "users", newUserId), newUser);

      message.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setUsers((prevUsers) => [...prevUsers, newUser]);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", error);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!");
    } finally {
      setLoading(false); // ‡∏õ‡∏¥‡∏î loading ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    }
  };

  const roles = [
    { value: "user", label: "üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
    { value: "admin", label: "üîß ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" },
  ];
  const handleDeleteUser = async (uid) => {
    setLoading(true);
    try {
      const success = await deleteUser(uid);
      if (success) {
        message.success("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state users ‡πÇ‡∏î‡∏¢‡∏•‡∏ö user ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        setUsers((prevUsers) => prevUsers.filter((user) => user.uid !== uid));
      } else {
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ!");
      }
    } catch (error) {
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ!");
    }
    setLoading(false);
  };

  return (
    <>
      <UserTable
        columns={userColumns(
          handleEditUser,
          handleDeleteUser,
          handleToggleStatus,
          pagination
        )}
        data={users}
        loading={loading}
        pagination={pagination}
        setPagination={setPagination}
        extraContent={
          <Button
            type="primary"
            icon={<UserAddOutlined />}
            onClick={() => setIsAddModalVisible(true)}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg"
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
          </Button>
        }
      />

      {/* ‚úÖ Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      <Modal
        title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
        open={isModalVisible}
        onCancel={handleModalClose}
        onOk={handleSaveUser}
        okText="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        confirmLoading={loading}
        centered
      >
        <Form
          form={form}
          layout="horizontal"
          labelCol={{ span: 6 }}
          wrapperCol={{ span: 18 }}
        >
          <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
            <Input.Group compact>
              <Form.Item
                name="name"
                noStyle
                rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" }]}
              >
                <Input
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                  style={{ width: "50%" }}
                  prefix={<UserOutlined />}
                />
              </Form.Item>
              <Form.Item
                name="lastName"
                noStyle
                rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" }]}
              >
                <Input placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" style={{ width: "50%" }} />
              </Form.Item>
            </Input.Group>
          </Form.Item>

          <Form.Item
            label="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
            name="role"
            rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" }]}
          >
            <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" suffixIcon={<SettingOutlined />}>
              {roles.map((role) => (
                <Select.Option key={role.value} value={role.value}>
                  {role.label}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* ‚úÖ Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      <Modal
        title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
        open={isAddModalVisible}
        onCancel={handleModalClose}
        onOk={handleAddUser}
        okText="‡πÄ‡∏û‡∏¥‡πà‡∏°"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        centered
      >
        <Form
          form={addForm}
          layout="horizontal"
          labelCol={{ span: 6 }}
          wrapperCol={{ span: 18 }}
        >
          {/* ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) */}
          <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
            <Input.Group compact>
              <Form.Item
                name="name"
                noStyle
                rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" }]}
              >
                <Input
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                  style={{ width: "50%" }}
                  prefix={<UserOutlined />}
                />
              </Form.Item>
              <Form.Item
                name="lastName"
                noStyle
                rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" }]}
              >
                <Input placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" style={{ width: "50%" }} />
              </Form.Item>
            </Input.Group>
          </Form.Item>

          {/* ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
          <Form.Item
            label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            name="email"
            rules={[
              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•" },
              { type: "email", message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
            ]}
          >
            <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•" prefix={<MailOutlined />} />
          </Form.Item>

          {/* ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
          <Form.Item
            label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            name="password"
            rules={[
              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô !" },
              { min: 6, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" },
            ]}
          >
            <Input.Password
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              prefix={<LockOutlined />}
            />
          </Form.Item>

          {/* ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
          <Form.Item
            label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            name="confirmPassword"
            dependencies={["password"]}
            rules={[
              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô !" },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue("password") === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!"));
                },
              }),
            ]}
          >
            <Input.Password
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              prefix={<LockOutlined />}
            />
          </Form.Item>

          {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó */}
          <Form.Item
            label="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
            name="role"
            rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" }]}
          >
            <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" suffixIcon={<SettingOutlined />}>
              <Select.Option value="user">üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</Select.Option>
              <Select.Option value="admin">üîß ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</Select.Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
};

export default User;
